'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function')}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called')}return call&&(typeof call==='object'||typeof call==='function')?call:self}function _inherits(subClass,superClass){if(typeof superClass!=='function'&&superClass!==null){throw new TypeError('Super expression must either be null or a function, not '+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}/**
 * Class represents custom error for Bad Request response
 * @param {string | null} [message = null] - error message
 */var ErrorBadRequest=function(_Error){_inherits(ErrorBadRequest,_Error);/**
   * Create ErrorBadRequest
   * @param {string | null} [message = null] - error message
   */function ErrorBadRequest(){var message=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;_classCallCheck(this,ErrorBadRequest);var _this=_possibleConstructorReturn(this,(ErrorBadRequest.__proto__||Object.getPrototypeOf(ErrorBadRequest)).call(this,message));_this.name='Bad Request';_this.statusCode=400;_this.statusText='Bad Request';_this.message=message;if(Error.captureStackTrace){Error.captureStackTrace(_this,ErrorBadRequest)}else{_this.stack=new Error().stack}return _this}return ErrorBadRequest}(Error);exports.default=ErrorBadRequest;